import{j as o}from"./jsx-runtime-BjG_zV1W.js";import{e as w}from"./storybook-lrzrXzR7.js";import{c as h}from"./component-P3MpLVno.js";import{V as C}from"./Viewer-DzJqVukv.js";import"./index-CjDrOnrV.js";import"./v4-Dz_GI0CC.js";import"./index-yIsmwZOr.js";const E=["appearance","cull","debugShowBoundingVolume","depthFailAppearance","modelMatrix","shadows","show"],I=["allowPicking","asynchronous","compressVertices","geometryInstances","interleave","releaseGeometryInstances","vertexCacheOptimize"],R=["onReady"],V=h({name:"Primitive",create(e,r){var a;if(!e.primitiveCollection)return;const i=new Cesium.Primitive(r);if(r.onReady){const m=()=>{var c,d;i.ready&&((c=r.onReady)==null||c.call(r,i),(d=e.scene)==null||d.postRender.removeEventListener(m))};(a=e.scene)==null||a.postRender.addEventListener(m)}return e.primitiveCollection.add(i),i},destroy(e,r){r.primitiveCollection&&!r.primitiveCollection.isDestroyed()&&r.primitiveCollection.remove(e),e.isDestroyed()||e.destroy()},cesiumProps:E,cesiumReadonlyProps:I,otherProps:R,useCommonEvent:!0}),n=V,D={title:"Primitive",component:n},f=new Cesium.GeometryInstance({geometry:new Cesium.EllipseGeometry({center:Cesium.Cartesian3.fromDegrees(-100,20),semiMinorAxis:5e5,semiMajorAxis:1e6,rotation:Cesium.Math.PI_OVER_FOUR,vertexFormat:Cesium.VertexFormat.POSITION_AND_ST}),id:"id"}),P=new Cesium.EllipsoidSurfaceAppearance({material:Cesium.Material.fromType("Checkerboard")}),s={render:e=>o.jsx(C,{full:!0,children:o.jsx(n,{...e,geometryInstances:f,appearance:P})})},t={render:e=>o.jsx(C,{full:!0,children:o.jsx(n,{...e,geometryInstances:f,appearance:P,...w})})};var l,p,u;s.parameters={...s.parameters,docs:{...(l=s.parameters)==null?void 0:l.docs,source:{originalSource:`{
  render: args => <Viewer full>
      <Primitive {...args} geometryInstances={geometry} appearance={appearance} />
    </Viewer>
}`,...(u=(p=s.parameters)==null?void 0:p.docs)==null?void 0:u.source}}};var v,y,g;t.parameters={...t.parameters,docs:{...(v=t.parameters)==null?void 0:v.docs,source:{originalSource:`{
  render: args => <Viewer full>
      <Primitive {...args} geometryInstances={geometry} appearance={appearance} {...events} />
    </Viewer>
}`,...(g=(y=t.parameters)==null?void 0:y.docs)==null?void 0:g.source}}};const F=["Basic","Events"];export{s as Basic,t as Events,F as __namedExportsOrder,D as default};
