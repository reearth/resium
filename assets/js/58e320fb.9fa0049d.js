"use strict";(globalThis.webpackChunkresium_docs=globalThis.webpackChunkresium_docs||[]).push([[5962],{8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var r=i(6540);const s={},o=r.createContext(s);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(o.Provider,{value:n},e.children)}},8854:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"guide","title":"Guide","description":"Component Lifecycle","source":"@site/docs/03-guide.md","sourceDirName":".","slug":"/guide","permalink":"/guide","draft":false,"unlisted":false,"editUrl":"https://github.com/reearth/resium/edit/main/docs/docs/03-guide.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"guide","title":"Guide"},"sidebar":"docs","previous":{"title":"Getting Started","permalink":"/getting_started"},"next":{"title":"Billboard","permalink":"/components/Billboard"}}');var s=i(4848),o=i(8453);const t={id:"guide",title:"Guide"},c="Guide",a={},d=[{value:"Component Lifecycle",id:"component-lifecycle",level:2},{value:"Context and component availability",id:"context-and-component-availability",level:2},{value:"Component location",id:"component-location",level:2},{value:"Properties",id:"properties",level:2},{value:"Cesium properties",id:"cesium-properties",level:3},{value:"Cesium read-only properties",id:"cesium-read-only-properties",level:3},{value:"Cesium events",id:"cesium-events",level:3},{value:"Other properties",id:"other-properties",level:3},{value:"Accessing to a raw Cesium element",id:"accessing-to-a-raw-cesium-element",level:2},{value:"Way 1: useRef hooks (function component)",id:"way-1-useref-hooks-function-component",level:3},{value:"Way 2: use a function (class component)",id:"way-2-use-a-function-class-component",level:3},{value:"Way 3: use createRef (class component)",id:"way-3-use-createref-class-component",level:3},{value:"Limitations",id:"limitations",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"guide",children:"Guide"})}),"\n",(0,s.jsx)(n.h2,{id:"component-lifecycle",children:"Component Lifecycle"}),"\n",(0,s.jsx)(n.p,{children:"Resium brings React's component lifecycle to Cesium. The relationship between Cesium elements and React's lifecycle is as follows:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Render: Nothing is rendered, as a cesium element is not initialized yet."}),"\n",(0,s.jsx)(n.li,{children:"Initalize Cesium element: An Cesium element is initialized, and it is added to its parent if the parent exists."}),"\n",(0,s.jsx)(n.li,{children:"Re-render: After Cesium element's initalization, children of the component are rendered. DOM never be rendered except root components (Viewer and CesiumWidget)."}),"\n",(0,s.jsx)(n.li,{children:'Update: Changed properties of the Cesium element are updated. If "Cesium read-only properties" are changed, the Cesium element will be reinitialized.'}),"\n",(0,s.jsx)(n.li,{children:"Unmount: The Cesium element is destroyed."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"context-and-component-availability",children:"Context and component availability"}),"\n",(0,s.jsx)(n.p,{children:"Some components provide some Cesium elements to children via React's context API. Many components use the closest component's context. If the context does not exists, components are not rendered."}),"\n",(0,s.jsxs)(n.p,{children:["All components except root components have to be mounted inside root components. Root components are ",(0,s.jsx)(n.code,{children:"Viewer"})," and ",(0,s.jsx)(n.code,{children:"CesiumWidget"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"Entity"})," component is mounted under ",(0,s.jsx)(n.code,{children:"Viewer"})," component, an Entity object is added to ",(0,s.jsx)(n.code,{children:"Viewer#entities"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"<Viewer>\n  <Entity />\n</Viewer>\n"})}),"\n",(0,s.jsx)(n.p,{children:"is equivalent to"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const viewer = new Cesium.Viewer();\nconst entity = new Cesium.Entity();\n\nviewer.entities.add(entity);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"Entity"})," component is mounted under ",(0,s.jsx)(n.code,{children:"CustomDataSource"})," component, an Entity object is added to ",(0,s.jsx)(n.code,{children:"CustomDataSource#entities"}),". At that time, the CustomDataSource object is added to ",(0,s.jsx)(n.code,{children:"Viewer#dataSources"}),". Of course ",(0,s.jsx)(n.code,{children:"CustomDataSource"})," component should be under ",(0,s.jsx)(n.code,{children:"Viewer"})," component."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"<Viewer>\n  <CustomDataSource>\n    <Entity />\n  </CustomDataSource>\n</Viewer>\n"})}),"\n",(0,s.jsx)(n.p,{children:"is equivalent to"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const viewer = new Cesium.Viewer();\nconst dataSource = new Cesium.CustomDataSource();\nconst entity = new Cesium.Entity();\n\ncustomDataSource.entities.add(entity);\nviewer.dataSources.add(dataSource);\n"})}),"\n",(0,s.jsx)(n.p,{children:'Such cases are also in other components. For details, refer to "Availability" in the document of each component.'}),"\n",(0,s.jsx)(n.h2,{id:"component-location",children:"Component location"}),"\n",(0,s.jsx)(n.p,{children:"Please place each component as close as possible under Viewer or CesiumWidget component to avoid extra rendering. Make component hierarchy shallow as possible."}),"\n",(0,s.jsx)(n.p,{children:"Exception are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Entity"})," > ",(0,s.jsx)(n.code,{children:"*Graphics"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Entity"})," > ",(0,s.jsx)(n.code,{children:"EntityDescription"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ScreenSpaceEventHandler"})," > ",(0,s.jsx)(n.code,{children:"ScreenSpaceEvent"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"xCollection"})," > ",(0,s.jsx)(n.code,{children:"x"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CustomDataSource"})," > ",(0,s.jsx)(n.code,{children:"Entity"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"GroundPrimitiveCollection"})," > ",(0,s.jsx)(n.code,{children:"GroundPrimitive"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["e.g.: ",(0,s.jsx)(n.code,{children:"Scene"})," > ",(0,s.jsx)(n.code,{children:"Camera"})," or ",(0,s.jsx)(n.code,{children:"Camera"})," > ",(0,s.jsx)(n.code,{children:"Entity"})," is not recommended."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// not recomended\n<Viewer>\n  <Scene>\n    <Camera>\n      <Entity />\n    </Camera>\n  </Scene>\n</Viewer>\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// recomended\n<Viewer>\n  <Scene />\n  <Camera />\n  <Entity />\n</Viewer>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(n.p,{children:"Each components of resium have 4 kinds of properties as bellow."}),"\n",(0,s.jsx)(n.h3,{id:"cesium-properties",children:"Cesium properties"}),"\n",(0,s.jsx)(n.p,{children:'"Cesium property" is a property derived from Cesium. Each properties are correspond to a property of the cesium element. All "cesium properties" are variable, so when they are updated in React component, the corresponding properties will be updated seamlessly.'}),"\n",(0,s.jsx)(n.h3,{id:"cesium-read-only-properties",children:"Cesium read-only properties"}),"\n",(0,s.jsx)(n.p,{children:'"Cesium read-only property" is also a property derived from Cesium, but it is immutable. They are available only when initializing the element.'}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:'If "Cesium read-only props" are changed in React component, the Cesium element will be destroyed and reinitialized.'})," It can be a cause of performance deterioration. Please use carefully to avoid changing as much as possible."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, ",(0,s.jsx)(n.code,{children:"imageryProvider"})," property of ",(0,s.jsx)(n.code,{children:"ImageryLayer"}),' component is a "Cesium read-only property". So in the following code, ImageryLayer is reinitialized in every rendering time!']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'const Example = () => (\n  <Viewer>\n    <ImageryLayer\n      imageryProvider={\n        new ArcGisMapServerImageryProvider({\n          url: "//services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer",\n        })\n      }\n    />\n  </Viewer>\n);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"imageryProvider"})," property is constant, The following is recommended."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'import { Viewer, ImageryLayer } from "resium";\nimport { ArcGisMapServerImageryProvider } from "cesium";\n\nconst imageryProvider = new ArcGisMapServerImageryProvider({\n  url: "//services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer",\n});\n\nconst ExampleComponent = () => (\n  <Viewer>\n    <ImageryLayer imageryProvider={imageryProvider} />\n  </Viewer>\n);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"imageryProvider"})," property is variable, use ",(0,s.jsx)(n.code,{children:"useMemo"})," hooks:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'import { useMemo } from "react";\nimport { Viewer, ImageryLayer } from "resium";\nimport { ArcGisMapServerImageryProvider } from "cesium";\n\nconst ExampleComponent = ({ url }) => {\n  const imageryProvider = useMemo(\n    () => new ArcGisMapServerImageryProvider({ url }),\n    [url],\n  );\n\n  return (\n    <Viewer>\n      <ImageryLayer imageryProvider={imageryProvider} />\n    </Viewer>\n  );\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"cesium-events",children:"Cesium events"}),"\n",(0,s.jsx)(n.p,{children:'"Cesium event" is a event propery of Cesium element. It can be used in the same way as normal React component events.'}),"\n",(0,s.jsxs)(n.p,{children:["They are renamed according to React's custom. For example, ",(0,s.jsx)(n.code,{children:"Viewer#trackedEntityChanged"})," => ",(0,s.jsx)(n.code,{children:"onTrackedEntityChange"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"other-properties",children:"Other properties"}),"\n",(0,s.jsx)(n.p,{children:"Some components have convenient properties that do not exist in the Cesium element. They can be used in the same way as normal React component properties."}),"\n",(0,s.jsx)(n.h2,{id:"accessing-to-a-raw-cesium-element",children:"Accessing to a raw Cesium element"}),"\n",(0,s.jsxs)(n.p,{children:["If you want to access a raw Cesium element, you can use ",(0,s.jsx)(n.code,{children:"ref"})," prop of components."]}),"\n",(0,s.jsxs)(n.p,{children:["Ref is one of the concepts that comes up in React. To see more information, see ",(0,s.jsx)(n.a,{href:"https://reactjs.org/docs/refs-and-the-dom.html",children:"the React documentation"}),"."]}),"\n",(0,s.jsx)(n.p,{children:'To know what is a Cesium element of each component, refer to "Cesium element" in the document of each component.'}),"\n",(0,s.jsxs)(n.p,{children:["Note: ",(0,s.jsx)(n.code,{children:"cesiumElement"})," property in the ref object can be ",(0,s.jsx)(n.code,{children:"undefined"}),": e.g. when an initialization error is occurred. Please check if it's not ",(0,s.jsx)(n.code,{children:"undefined"})," when using ",(0,s.jsx)(n.code,{children:"cesiumElement"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"way-1-useref-hooks-function-component",children:"Way 1: useRef hooks (function component)"}),"\n",(0,s.jsx)(n.p,{children:"Function component:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'import { useEffect, useRef } from "react";\nimport { Viewer } from "resium";\n\nconst ExampleComponent = () => {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (ref.current && ref.current.cesiumElement) {\n      // ref.current.cesiumElement is Cesium\'s Viewer\n      // DO SOMETHING\n    }\n  }, []);\n\n  return <Viewer ref={ref} />;\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"Function component in TypeScript:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { useEffect, useRef } from "react";\nimport { Viewer as CesiumViewer } from "cesium";\nimport { Viewer, CesiumComponentRef } from "resium";\n\nconst ExampleComponent = () => {\n  const ref = useRef<CesiumComponentRef<CesiumViewer>>(null);\n\n  useEffect(() => {\n    if (ref.current?.cesiumElement) {\n      // ref.current.cesiumElement is Cesium\'s Viewer\n      // DO SOMETHING\n    }\n  }, []);\n\n  return <Viewer ref={ref} />;\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"way-2-use-a-function-class-component",children:"Way 2: use a function (class component)"}),"\n",(0,s.jsx)(n.p,{children:"Class component:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'import { Component } from "react";\nimport { Viewer } from "resium";\n\nclass ExampleComponent extends Component {\n  componentDidMount() {\n    if (this.viewer) {\n      // this.viewer is Cesium\'s Viewer\n      // DO SOMETHING\n    }\n  }\n\n  render() {\n    return (\n      <Viewer\n        ref={(e) => {\n          this.viewer = e ? e.cesiumElement : undefined;\n        }}\n      />\n    );\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Class component in TypeScript:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { Component } from "react";\nimport { Viewer as CesiumViewer } from "cesium";\nimport { Viewer } from "resium";\n\nclass ExampleComponent extends Component {\n  private viewer: CesiumViewer | undefined;\n\n  componentDidMount() {\n    if (this.viewer) {\n      // this.viewer is Cesium\'s Viewer\n      // DO SOMETHING\n    }\n  }\n\n  render() {\n    return (\n      <Viewer\n        ref={(e) => {\n          this.viewer = e ? e.cesiumElement : undefined;\n        }}\n      />\n    );\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"way-3-use-createref-class-component",children:"Way 3: use createRef (class component)"}),"\n",(0,s.jsx)(n.p,{children:"Class component:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'import { Component, createRef } from "react";\nimport { Viewer } from "resium";\n\nclass ExampleComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.ref = createRef();\n  }\n\n  componentDidMount() {\n    if (this.ref.current && this.ref.current.cesiumElement) {\n      // this.ref.current.cesiumElement is Cesium\'s Viewer\n      // DO SOMETHING\n    }\n  }\n\n  render() {\n    return <Viewer ref={this.ref} />;\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Class component in TypeScript:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { Component, createRef } from "react";\nimport { Viewer as CesiumViewer } from "cesium";\nimport { Viewer } from "resium";\n\nclass ExampleComponent extends Component {\n  private ref = createRef<CesiumViewer | undefined>();\n\n  componentDidMount() {\n    if (this.ref.current?.cesiumElement) {\n      // this.ref.current.cesiumElement is Cesium\'s Viewer\n      // DO SOMETHING\n    }\n  }\n\n  render() {\n    return <Viewer ref={this.ref} />;\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Server side rendering is not supported. Cesium can be rendered only in web browsers."}),"\n",(0,s.jsxs)(n.li,{children:["React Native is not supported. Resium runs only with ",(0,s.jsx)(n.code,{children:"react-dom"}),", as Cesium depends on APIs of web browsers (DOM, WebGL, Web Worker and so on)."]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);